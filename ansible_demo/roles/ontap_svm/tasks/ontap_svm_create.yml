---
- name: Set Connection Details
  ansible.builtin.set_fact:
    ontap_login: &ontap_login
      hostname:                   "{{ ontap_hostname }}"
      username:                   "{{ ontap_username }}"
      password:                   "{{ ontap_password }}"
      https:                      true
      validate_certs:             false
      use_rest:                   Never
  no_log: true

- name: Set Connection Details - CIFS setup
  ansible.builtin.set_fact:
    ad_login: &ad_login
      admin_username:             "{{ ad_username }}"
      admin_password:             "{{ ad_password }}"
  no_log: true
  when:
    - not (ad_username | default('')) == ""
    - not (ad_password | default('')) == ""

- name: Create SVM
  na_ontap_svm:
    state:                        present
    name:                         "{{ __ontap_svm_object__.name }}"
    language:                     "{{ __ontap_svm_object__.language             | default(omit) }}"
    comment:                      "{{ __ontap_svm_object__.comment              | default(omit) }}"
    ipspace:                      "{{ __ontap_svm_object__.ipspace.name         | default(omit) }}"
    snapshot_policy:              "{{ __ontap_svm_object__.snapshot_policy.name | default(omit) }}"
    <<: *ontap_login

- name: Management IP Interface
  block:
  - name: Create Management IP Interface
    na_ontap_interface:
      state:                        present
      interface_name:               "{{ item.name }}"
      vserver:                      "{{ __ontap_svm_object__.name }}"
      address:                      "{{ item.ip.address }}"
      netmask:                      "{{ item.ip.netmask }}"
      service_policy:               "{{ item.service_policy.name }}"
      home_node:                    "{{ item.location.home_node.name }}"
      home_port:                    "{{ item.location.home_port.name }}"
# FIXME - This one is ugly, but "role" must be provided as long as we have to use ZAPI here
      role:                         "data"
      <<: *ontap_login
    loop:
      "{{ __ontap_svm_object__.ip_interfaces | list }}"
    when:
      - item.name == __ontap_ip_interface_name__
  when:
    - not __ontap_ip_interface_name__ | default('') == ""

- name: Configure DNS
  na_ontap_dns:
    state:                        present
    vserver:                      "{{ __ontap_svm_object__.name }}"
    domains:                      "{{ __ontap_svm_object__.dns.domains             | default(omit) }}"
    nameservers:                  "{{ __ontap_svm_object__.dns.servers             | default(omit) }}"
#    skip_validation: yes
    <<: *ontap_login
  when:
    - ontap_ip_interface_name is defined
    - __ontap_svm_object__.dns.domains[0] | default('') == ""
    - __ontap_svm_object__.dns.servers[0] | default('') == ""

- name: Configure CIFS
  na_ontap_cifs:
    state:                        present
    vserver:                      "{{ __ontap_svm_object__.name }}"
    name:                         "{{ __ontap_svm_object__.cifs.name }}"
    service_state:                started
    domain:                       "{{ __ontap_svm_object__.cifs.ad_domain.fqdn }}"
    <<: *ad_login
    <<: *ontap_login
  when:
    - ad_login is defined
    - not (__ontap_svm_object__.cifs.name | default('')) == ""
    - not (__ontap_svm_object__.cifs.ad_domain.fqdn | default('')) == ""
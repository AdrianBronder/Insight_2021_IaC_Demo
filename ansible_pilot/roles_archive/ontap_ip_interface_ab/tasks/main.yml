---
# tasks file for ontap_ip_interface
- name: Validate Mandatory Input
  fail:
    msg:
      - "You must pass the 'ontap_ip_interface_name' and 'ontap_svm_name'"
      - "or the '__ontap_ip_interface_input__' variable"
  when:
    - ((ontap_ip_interface_name is undefined or
      ontap_svm_name is undefined) and
      __ontap_ip_interface_input__ is undefined)
  tags:
    - always

- name: Set Connection Details
  ansible.builtin.set_fact:
    ontap_login: &ontap_login
      hostname:                   "{{ ontap_hostname }}"
      username:                   "{{ ontap_username }}"
      password:                   "{{ ontap_password }}"
      https:                      true
      validate_certs:             false
      use_rest:                   Never
  no_log: true
  tags:
    - always

- name: Source Inventory Information
  block:
    - name: Find SVM
      ansible.builtin.set_fact:
        ontap_svm_object: "{{ item }}"
      loop:
        "{{ svms | list }}"
      when:
        - item.name == ontap_svm_name
    - name: Find IP Interface
      ansible.builtin.set_fact:
        ontap_ip_interface_object: "{{ item }}"
      loop:
        "{{ ontap_svm_object.ip_interfaces | list}}"
      when:
        - item.name == ontap_ip_interface_name
  tags:
    - source_inventory
# FIXME - Additioanl condition required to check, if SVM has been found in inventory

- name: Source Template Information
  block:
    - name: Merge Defaults/Vars with IP Interface Input
      ansible.builtin.set_fact:
        ontap_ip_interface_object: "{{ ontap_ip_interface_object | combine(__ontap_ip_interface_input__, recursive=True) }}"
  when:
    - __ontap_ip_interface_input__ is defined

- name: Create IP Interface
  na_ontap_interface:
    state:                        present
    interface_name:               "{{ ontap_ip_interface_object.name }}"
    vserver:                      "{{ ontap_ip_interface_object.svm.name }}"
    address:                      "{{ ontap_ip_interface_object.ip.address }}"
    netmask:                      "{{ ontap_ip_interface_object.ip.netmask }}"
    service_policy:               "{{ ontap_ip_interface_object.service_policy.name }}"
    home_node:                    "{{ ontap_ip_interface_object.location.home_node.name }}"
    home_port:                    "{{ ontap_ip_interface_object.location.home_port.name }}"
# FIXME - This one is ugly, but "role" must be provided as long as we have to use ZAPI here
    role:                         "data"
    <<: *ontap_login
  tags:
    - create_all
    - create_ontap_ip_interface

- name: Delete IP Interface
  na_ontap_interface:
    state:                        absent
    interface_name:               "{{ ontap_ip_interface_object.name }}"
    vserver:                      "{{ ontap_ip_interface_object.svm.name }}"
    <<: *ontap_login
  tags:
    - never
    - delete_all
    - delete_ontap_ip_interface
